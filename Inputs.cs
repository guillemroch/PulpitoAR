//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Interaction"",
            ""id"": ""9ecfab0a-cc23-4952-ac98-d97b45b47132"",
            ""actions"": [
                {
                    ""name"": ""Poke"",
                    ""type"": ""Button"",
                    ""id"": ""73c1fcc8-c995-4e76-a872-9b5de0cde0ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d652eee6-0627-4aaa-9b7f-668afc03e34f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pet"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e723c7a9-4d41-4a34-b232-758ee44b3ca0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3b62f19d-2f38-4d7e-8764-3bb2e1f23b27"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f31d8f80-89e8-4df8-9f2b-e66ae54be5f6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""331b2172-807a-4072-8208-9991d1cbc48f"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca653aeb-d624-42ca-89e8-66e4af8ee604"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""507fa775-30fb-4c8a-9cc0-d002333a069c"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25a29001-3514-423d-9b87-b467d81cf852"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Interaction
        m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
        m_Interaction_Poke = m_Interaction.FindAction("Poke", throwIfNotFound: true);
        m_Interaction_Position = m_Interaction.FindAction("Position", throwIfNotFound: true);
        m_Interaction_Pet = m_Interaction.FindAction("Pet", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Interaction
    private readonly InputActionMap m_Interaction;
    private IInteractionActions m_InteractionActionsCallbackInterface;
    private readonly InputAction m_Interaction_Poke;
    private readonly InputAction m_Interaction_Position;
    private readonly InputAction m_Interaction_Pet;
    public struct InteractionActions
    {
        private @Inputs m_Wrapper;
        public InteractionActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Poke => m_Wrapper.m_Interaction_Poke;
        public InputAction @Position => m_Wrapper.m_Interaction_Position;
        public InputAction @Pet => m_Wrapper.m_Interaction_Pet;
        public InputActionMap Get() { return m_Wrapper.m_Interaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionActions instance)
        {
            if (m_Wrapper.m_InteractionActionsCallbackInterface != null)
            {
                @Poke.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPoke;
                @Poke.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPoke;
                @Poke.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPoke;
                @Position.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPosition;
                @Pet.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPet;
                @Pet.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPet;
                @Pet.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPet;
            }
            m_Wrapper.m_InteractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Poke.started += instance.OnPoke;
                @Poke.performed += instance.OnPoke;
                @Poke.canceled += instance.OnPoke;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Pet.started += instance.OnPet;
                @Pet.performed += instance.OnPet;
                @Pet.canceled += instance.OnPet;
            }
        }
    }
    public InteractionActions @Interaction => new InteractionActions(this);
    public interface IInteractionActions
    {
        void OnPoke(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnPet(InputAction.CallbackContext context);
    }
}
